use axiomatic.AxiomaticSem
use dataTypes.DataTypes
use seq.Seq
use int.Int
let test (__stack__: stack_t) (__fuel__: int) : stack_t
  requires { (length __stack__) = 1 }
  requires { __fuel__ > 0 }
  requires { (get_type (__stack__[0]))
               = (T_pair (T_list T_string ) (T_list T_string )) }
  ensures { (length result) = 1 }
  ensures { (get_type (result[0]))
              = (T_pair (T_list T_operation ) (T_list T_string )) } =
  let __stack__ =
    [@expl:Intermidate PostCondition 16]
    [@vc:white_box]
    fun 
      ensures { ((length result) = 1) /\
                  ((get_type (result[0]))
                     = (T_pair (T_list T_operation ) (T_list T_string ))) } ->
      let __stack__ =
        [@expl:Intermidate PostCondition 15]
        [@vc:white_box]
        fun 
          ensures { (((length result) = 2) /\
                       ((get_type (result[0])) = (T_list T_operation ))) /\
                      ((get_type (result[1])) = (T_list T_string )) } ->
          let __stack__ =
            [@expl:Intermidate PostCondition 14]
            [@vc:white_box]
            fun 
              ensures { ((length result) = 1) /\
                          ((get_type (result[0])) = (T_list T_string )) } ->
              let __stack__ =
                [@expl:Intermidate PostCondition 13]
                [@vc:white_box]
                fun 
                  ensures { (((length result) = 2) /\
                               ((get_type (result[0])) = (T_list T_string ))) /\
                              ((get_type (result[1])) = (T_list T_string )) } ->
                  let __stack__ =
                    [@expl:Intermidate PostCondition 12]
                    [@vc:white_box]
                    fun 
                      ensures { (((length result) = 2) /\
                                   ((get_type (result[0]))
                                      = (T_list T_string ))) /\
                                  ((get_type (result[1]))
                                     = (T_list T_string )) } ->
                      let __stack__ =
                        [@expl:Intermidate PostCondition 11]
                        [@vc:white_box]
                        fun 
                          ensures { ((length result) = 1) /\
                                      ((get_type (result[0]))
                                         = (T_list T_string )) } ->
                          car __stack__ __fuel__ in
                      ([@expl:Intermidate PostCondition 10]
                       [@vc:white_box]
                       fun 
                         ensures { (((length result) = 2) /\
                                      ((get_type (result[0]))
                                         = (T_list T_string ))) /\
                                     ((get_type (result[1]))
                                        = (T_list T_string )) } ->
                         let top = peek __stack__ in
                         (let __stack__ = __stack__[1 ..] in
                          (let __stack__ =
                             [@expl:Intermidate PostCondition 9]
                             [@vc:white_box]
                             fun 
                               ensures { (((length result) = 2) /\
                                            ((get_type (result[0]))
                                               = (T_list T_string ))) /\
                                           ((get_type (result[1]))
                                              = (T_list T_string )) } ->
                               nil_op __stack__ __fuel__ T_string  in
                           (top :: __stack__)))) in
                  ([@expl:Intermidate PostCondition 8]
                   [@vc:white_box]
                   fun 
                     ensures { (((length result) = 2) /\
                                  ((get_type (result[0]))
                                     = (T_list T_string ))) /\
                                 ((get_type (result[1])) = (T_list T_string )) } ->
                     match peek __stack__
                     with
                       | (SD (D_list (Cons hd tl) t)) ->
                           (let __stack__ =
                              let __stack__ = __stack__[1 ..] in
                              (hd :: ((D_list tl t) :: __stack__)) in
                            ([@expl:Intermidate PostCondition 6]
                             [@vc:white_box]
                             fun 
                               ensures { (((length result) = 2) /\
                                            ((get_type (result[0]))
                                               = (T_list T_string ))) /\
                                           ((get_type (result[1]))
                                              = (T_list T_string )) } ->
                               let __stack__ =
                                 [@expl:Intermidate PostCondition 5]
                                 [@vc:white_box]
                                 fun 
                                   ensures { (((length result) = 2) /\
                                                ((get_type (result[0]))
                                                   = (T_list T_string ))) /\
                                               ((get_type (result[1]))
                                                  = (T_list T_string )) } ->
                                   cons_op __stack__ __fuel__ in
                               ([@expl:Intermidate PostCondition 4]
                                [@vc:white_box]
                                fun 
                                  ensures { (((length result) = 2) /\
                                               ((get_type (result[0]))
                                                  = (T_list T_string ))) /\
                                              ((get_type (result[1]))
                                                 = (T_list T_string )) } ->
                                  swap __stack__ __fuel__)))
                       | (SD (D_list _Nil _)) ->
                           (let __stack__ = __stack__[1 ..] in
                            ([@expl:Intermidate PostCondition 7]
                             [@vc:white_box]
                             fun 
                               ensures { (((length result) = 2) /\
                                            ((get_type (result[0]))
                                               = (T_list T_string ))) /\
                                           ((get_type (result[1]))
                                              = (T_list T_string )) } ->
                               nil_op __stack__ __fuel__ T_string ))
                       | _ -> absurd
                     end) in
              ([@expl:Intermidate PostCondition 3]
               [@vc:white_box]
               fun 
                 ensures { ((length result) = 1) /\
                             ((get_type (result[0])) = (T_list T_string )) } ->
                 drop __stack__ __fuel__) in
          ([@expl:Intermidate PostCondition 2]
           [@vc:white_box]
           fun 
             ensures { (((length result) = 2) /\
                          ((get_type (result[0])) = (T_list T_operation ))) /\
                         ((get_type (result[1])) = (T_list T_string )) } ->
             nil_op __stack__ __fuel__ T_operation ) in
      ([@expl:Intermidate PostCondition 1]
       [@vc:white_box]
       fun 
         ensures { ((length result) = 1) /\
                     ((get_type (result[0]))
                        = (T_pair (T_list T_operation ) (T_list T_string ))) } ->
         pair __stack__ __fuel__) in
  __stack__