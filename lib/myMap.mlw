module FMapSum

  use map.Map
  use fmap.Fmap, set.Fset
  use import set.FsetSum as FS

  function sum (m: fmap 'a int) : int =
    FS.sum m.domain (fun e -> m[e])

  use int.Int

  lemma sum_add_sub: forall m: fmap 'a int, x y: 'a, v: int.
    x <> y -> mem x m.domain -> mem y m.domain ->
    sum m = sum (Fmap.add x (m[x] + v) (Fmap.add y (m[y] - v) m))

  lemma sum_add_no_domain_sub: forall m: fmap 'a int, x y: 'a, v: int.
    x <> y -> mem y m.domain -> not mem x m.domain ->
    sum m = sum (Fmap.add x v (Fmap.add y (m[y] - v) m))

  (* lemma sum_add_sub_no_domain: forall m: fmap 'a int, x y: 'a, v: int. *)
  (*   x <> y -> not mem y m.domain -> mem x m.domain -> *)
  (*   sum m = sum (Fmap.add x (m[x] + v) (Fmap.add y (-v) m)) *)

end

module MyMap
use option.Option
use map.Map

type key

clone export fmap.MapApp with type key = key

val find_opt (k: key) (m: t 'd) : option 'd
ensures { match result with
  | None -> not S.mem k m.domain
  | Some v -> v = m[k] /\ S.mem k m.domain
  end
}

end
